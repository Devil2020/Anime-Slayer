plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'realm-android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-android-extensions'
    id "com.google.protobuf" version "0.8.12"
    id 'jacoco'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

android {

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }

/*    packagingOptions {
        exclude 'META-INF/library_release.kotlin_module'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'project.properties'
        exclude("META-INF/*.kotlin_module")

    }*/

    packagingOptions {
        pickFirst 'META-INF/AL2.0'
        pickFirst 'META-INF/LGPL2.1'
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        multiDexEnabled true
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            def serverUrl = '\"' + ("https://api.themoviedb.org/3/") + '\"'
            def dataBaseName = '\"' + ("default_db") + '\"'
            buildConfigField("String", "SERVER_URL", serverUrl)
            buildConfigField("String", "DATABASE_NAME", dataBaseName)
        }

        debug {
            testCoverageEnabled true
            def serverUrl = '\"' + ("https://api.themoviedb.org/3/") + '\"'
            def dataBaseName = '\"' + ("default_db") + '\"'
            buildConfigField("String", "SERVER_URL", serverUrl)
            buildConfigField("String", "DATABASE_NAME", dataBaseName)
        }

    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }


}
kapt {
    correctErrorTypes true
}


dependencies {

    implementation libraries.kotlin.values()
    implementation libraries.ui.values()
    implementation libraries.hilt.values()
    implementation project(path: ':core:network_core')
    kapt libraries.hiltCompiler.values()
    implementation project(path: ':core:style')
    implementation libraries.life_cycle.values()
    implementation libraries.navigation.values()
    implementation libraries.retrofit_root.values()
    implementation libraries.discreteScrollView
    implementation libraries.responsive_design.values()
    implementation libraries.media
    implementation libraries.pagination3.values()
    implementation libraries.dataStore.values()
    implementation libraries.room.values()
    implementation libraries.sharedpreference.values()
    implementation libraries.lottie
    implementation libraries.fuel_root.values()
    implementation libraries.flashbar
    implementation libraries.paper
    implementation libraries.shimmer
    implementation libraries.glide
/*    implementation libraries.moshi
    kapt libraries.moshi_kapt*/
    implementation libraries.multidex
    kapt libraries.glide_kapt

    implementation libraries.test.values()
    testImplementation libraries.testImplementation.values()
    androidTestImplementation libraries.androidTestImplementation.values()
}