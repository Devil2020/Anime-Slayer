plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-android-extensions'
    id "com.google.protobuf" version "0.8.12"

}
apply from: "../artifacts.gradle"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.morse.animeslayer"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        multiDexEnabled true
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {

            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.config = getProps('../config/release_properties.properties')

            ext.config.each { p ->

                if(p.key == "ApplicationName"){

                    resValue "string","app_name", p.value

                }

                else if(p.key=="ApplicationIdSyffix"){

                    applicationIdSuffix p.value

                }else

                    buildConfigField 'String', p.key, p.value

            }


        }

        staging {

            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'


            ext.config = getProps('../config/test_properties.properties')

            ext.config.each { p ->

                if (p.key == "ApplicationName") {

                    resValue "string", "app_name", p.value.replace('"', '')

                } else if (p.key == "ApplicationIdSyffix") {

                    applicationIdSuffix p.value

                } else {

                    buildConfigField 'String', p.key, p.value

                }

            }

        }
        debug {

            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.config = getProps('../config/development_properties.properties')

            ext.config.each { p ->

                if (p.key == "ApplicationName") {

                    resValue "string", "app_name", p.value

                } else if (p.key == "ApplicationIdSyffix") {

                    applicationIdSuffix p.value

                } else

                    buildConfigField 'String', p.key, p.value


            }

        }
    }
    buildFeatures {
        dataBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/library_release.kotlin_module'
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libraries.kotlin.values()
    implementation libraries.hilt.values()
    implementation libraries.ui.values()
    implementation project(path: ':core:common')
    implementation project(path: ':core:style')
    implementation project(path: ':domain')
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt libraries.hiltCompiler.values()
    implementation libraries.life_cycle.values()
    implementation libraries.navigation.values()
    implementation libraries.retrofit_root.values()
    implementation libraries.responsive_design.values()
    implementation libraries.discreteScrollView
    implementation 'com.yarolegovich:discrete-scrollview:1.5.1'
    implementation libraries.youtubePlayer
    implementation libraries.fuel_root.values()
    implementation libraries.map.values()
    implementation libraries.pagination3.values()
    implementation libraries.shimmer
    implementation libraries.dataStore.values()
    implementation libraries.room.values()
    /* implementation libraries.activityAndfragmentKTX.values()*/
    implementation libraries.lottie
    implementation libraries.multidex
    implementation libraries.life_cycle.values()
    implementation libraries.glide
    implementation libraries.switch
    kapt libraries.glide_kapt
/*
    implementation libraries.moshi
    kapt libraries.moshi_kapt
*/
    implementation libraries.play_core
    implementation libraries.test.values()
    testImplementation libraries.testImplementation.values ()
    androidTestImplementation libraries.androidTestImplementation.values ()
}

def getProps(path) {

    Properties props = new Properties()

    props.load(new FileInputStream(file(path)))

    return props

}