# This is a basic workflow to help you get started with Actions

name: AllGenericWorkFlows

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
      - network
  pull_request:
    branches: [ master , network ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Start:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Runs a set of commands using the runners shell
      - name: Run Welcome Script 🔥
        run: |
          echo 🔥Welcome on Anime Slayer WorkFlow Project 🔥
          echo This Project have Muliptle WorkFlow with Multiple States 🐱‍👤


  Lint:
    # The type of runner that the job will run on
    needs: [ Start ]
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2

      - name: 1- Start Linting on Core Modules [Common Module]  🚀
        run: ./gradlew :core:common:lint

      - name: 1 - Upload Core Module for Common Report For Linting 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: core_common.html
          path: core/common/build/reports/lint-results.html


      - name: 2 - Start Linting on Core Modules [Network Core Module] 🚀
        run: ./gradlew :core:network_core:lint

      - name: 2 - Upload Core Module for Network Core Report For Linting 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: core_network.html
          path: core/network_core/build/reports/lint-results.html


      - name: 3 - Start Linting on Core Modules [Style Module] 🚀
        run: ./gradlew :core:style:lint

      - name: 3 - Upload Core Module for Style Core Report For Linting 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: core_style.html
          path: core/style/build/reports/lint-results.html

  #      - name: Linting The Kotlin Code 🚀
  #        run: ./gradlew ktlintDebugCheck
  #
  #      - name: Linting The Kotlin Code 🚀
  #        run: ./gradlew ktlintDebugCheck
  #
  #      # Runs a single command using the runners shell
  #      - name: Linting The Android Project and Find Any Problems 🚀
  #        run: ./gradlew lintDebug
  #
  #      - name: Upload Html Final Report For Linting 🐱‍🏍
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: index.html
  #          path: app/build/reports/lint-results-debug.html

  Unit_test:
    needs: [ Lint ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2

      - name: 1- Run all Unit Test For Core Modules [Common Module]
        run: ./gradlew :core:common:test

      - name: 1- Upload Unit Test HTML For Core Modules [Common Module] 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: core_common_unit_test
          path: core/common/build/reports/tests/testDebugUnitTest

      - name: 2- Run all Unit Test For Core Modules [Network Module]
        run: ./gradlew :core:network_core:test

      - name: 2- Upload Unit Test HTML For Core Modules [Network Module] 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: core_network_unit_test
          path: core/network_core/build/reports/tests/testDebugUnitTest

      - name: 3- Run all Unit Test For Core Modules [Style Module]
        run: ./gradlew :core:style:test

      - name: 3- Upload Unit Test HTML For Core Modules [Style Module] 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: core_style_unit_test
          path: core/style/build/reports/tests/testDebugUnitTest

  Jacoco:
    needs: [ Unit_test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2

      - name: 1- Run Static Code Analtisis with Jacoco 🔥
        run: ./gradlew :core:common:jacocoTestReport

      - name: 1- Upload Jacoco Report HTML For Core Modules [Common Module] 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: jacoco_report_for_common_module
          path: \core\common\build\reports\coverage\debug


  Instrumented_test:
    needs: [ Jacoco ]
    runs-on: macos-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2

      - name: 1- Run Espresso Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          script: ./gradlew connectedCheck

      - name: 1- Upload Instrumented Test For Application 🐱‍🏍
        uses: actions/upload-artifact@v2
        with:
          name: application_instrumented_test
          path: app/build/reports/androidTests/connected

  SonarCloudStaicCodeAnaylsis:

    needs: [ Instrumented_test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2

      - name: 1- Run SonarCloud For Static Code Analysis .
        #        For Getting Sonar Token we must login to SonarCloud.Io and then login with Githup
        #        After that we go to this link https://sonarcloud.io/account Then Tab on Security Tab
        #        and Clicke on Generate a New Token , So It will Generate this cb9258e94b58abf8d0045194b4953c5721cecdee
        #        After That we go to the Setting Screen for the Repository and Go to Secrets
        run: ./gradlew app:sonarqube -Dsonar.login=${{secrets.SONAR_TOKEN}}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}


  BuildApk:
    needs: [ SonarCloudStaicCodeAnaylsis ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2

      - name: Build Apk 🔥
        run: ./gradlew assembleDebug --stacktrace

      - name: 🎯 Upload Apk 🎯
        uses: actions/upload-artifact@v2
        with:
          name: anime_slayer_apk.apk
          path: app/build/outputs/apk/debug/app-debug.apk

  Finsih:

    needs:
      - BuildApk
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a Finish script 🖐
        run: echo Nice to make every thing Automated ❤
